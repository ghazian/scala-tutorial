[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Ghazian\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Ghazian\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Amazon.com Inc. Java 11.0.17)
[debug]       Load.loadUnit: plugins took 70.9063ms
[debug]       Load.loadUnit: defsScala took 0.2006ms
[debug] [Loading] Scanning directory C:\Users\Ghazian\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ghazian\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.4731 ms
[debug]           Load.resolveProject(global-plugins) took 35.8041ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Ghazian\.sbt\1.0\plugins, plugins: List(<none>))) took 70.0209ms
[debug] [Loading] Done in C:\Users\Ghazian\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 85.0767ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2492ms
[debug]     Load.loadUnit(file:/C:/Users/Ghazian/.sbt/1.0/plugins/, ...) took 163.7069ms
[debug]   Load.apply: load took 316.1765ms
[debug]   Load.apply: resolveProjects took 4.4729ms
[debug]   Load.apply: finalTransforms took 44.0827ms
[debug]   Load.apply: config.delegates took 5.9142ms
[debug]   Load.apply: Def.make(settings)... took 333.4943ms
[debug]   Load.apply: structureIndex took 89.204ms
[debug]   Load.apply: mkStreams took 1.398ms
[info] loading global plugins from C:\Users\Ghazian\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1973.8479ms
[debug]           Load.loadUnit: plugins took 19.0284ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial\project
[debug]             Load.loadUnit: mkEval took 5.3704ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3914 ms
[info] loading settings for project udemy-scala-tutorial-build from idea.sbt ...
[debug]               Load.resolveProject(udemy-scala-tutorial-build) took 2.682ms
[debug]             Load.loadTransitive: finalizeProject(Project(id udemy-scala-tutorial-build, base: C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial\project, plugins: List(<none>))) took 4.5757ms
[debug] [Loading] Done in C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial\project, returning: (udemy-scala-tutorial-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 129.5354ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.0725ms
[debug]         Load.loadUnit(file:/C:/Users/Ghazian/Documents/scala-tut/udemy-scala-tutorial/project/, ...) took 152.4863ms
[debug]       Load.apply: load took 153.6689ms
[debug]       Load.apply: resolveProjects took 0.0975ms
[debug]       Load.apply: finalTransforms took 9.0143ms
[debug]       Load.apply: config.delegates took 0.3683ms
[debug]       Load.apply: Def.make(settings)... took 73.9155ms
[debug]       Load.apply: structureIndex took 26.5904ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 520.5162ms
[debug]     Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial
[debug]       Load.loadUnit: mkEval took 0.1871ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.51 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 23.9587ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial, plugins: List(<none>))) took 26.7758ms
[debug] [Loading] Done in C:\Users\Ghazian\Documents\scala-tut\udemy-scala-tutorial, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 98.5583ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.798ms
[debug]   Load.loadUnit(file:/C:/Users/Ghazian/Documents/scala-tut/udemy-scala-tutorial/, ...) took 622.314ms
[debug] Load.apply: load took 623.6509ms
[debug] Load.apply: resolveProjects took 0.0996ms
[debug] Load.apply: finalTransforms took 17.7072ms
[debug] Load.apply: config.delegates took 0.1944ms
[debug] Load.apply: Def.make(settings)... took 51.7862ms
[debug] Load.apply: structureIndex took 23.1821ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to udemy-scala-tutorial (in build file:/C:/Users/Ghazian/Documents/scala-tut/udemy-scala-tutorial/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53296 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53296, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to udemy-scala-tutorial (in build file:/C:/Users/Ghazian/Documents/scala-tut/udemy-scala-tutorial/)
[debug] > Exec(idea-shell, None, None)
